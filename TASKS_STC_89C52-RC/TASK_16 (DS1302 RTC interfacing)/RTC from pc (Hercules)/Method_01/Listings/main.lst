C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:01:58 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          //#include <reg52.h>
   2          //#include <intrins.h>
   3          //#include <stdio.h>
   4          
   5          //sbit SCLK = P3^6;  // Serial Clock
   6          //sbit IO = P3^4;    // Data I/O
   7          //sbit CE = P3^5;    // Chip Enable
   8          
   9          //sbit RS = P2^6;
  10          //sbit RW = P2^5;
  11          //sbit EN = P2^7;
  12          
  13          //unsigned char sec, min, hour, day, month, year;
  14          
  15          //// Delay Function
  16          //void delay(unsigned int ms) {
  17          //    while(ms--) _nop_();
  18          //}
  19          
  20          //// LCD Functions
  21          //void LCD_Command(unsigned char command) {
  22          //    RS = 0; 
  23          //    RW = 0; 
  24          //    P0 = command;
  25          //    EN = 1;
  26          //    delay(5);
  27          //    EN = 0;
  28          //}
  29          
  30          //void LCD_Init() {
  31          //    LCD_Command(0x38);  // 8-bit mode, 2 lines
  32          //    LCD_Command(0x0C);  // Display on, cursor off
  33          //    LCD_Command(0x06);  // Increment cursor
  34          //    LCD_Command(0x01);  // Clear display
  35          //}
  36          
  37          //void LCD_WriteChar(char c) {
  38          //    RS = 1;
  39          //    RW = 0;
  40          //    P0 = c;
  41          //    EN = 1;
  42          //    delay(5);
  43          //    EN = 0;
  44          //}
  45          
  46          //void LCD_WriteString(char *str) {
  47          //    while(*str) {
  48          //        LCD_WriteChar(*str++);
  49          //    }
  50          //}
  51          
  52          //// DS1302 Functions
  53          //void DS1302_Init() {
  54          //    CE = 0;  // Disable DS1302
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:01:58 PAGE 2   

  55          //    SCLK = 0;  // Initialize clock line
  56          //}
  57          
  58          //void DS1302_WriteByte(unsigned char dat) {
  59          //    unsigned char i;
  60          //    for (i = 0; i < 8; i++) {
  61          //        IO = dat & 0x01;
  62          //        SCLK = 1;
  63          //        dat >>= 1;
  64          //        SCLK = 0;
  65          //    }
  66          //}
  67          
  68          //unsigned char DS1302_ReadByte() {
  69          //    unsigned char dat = 0;
  70          //    unsigned char i;
  71          //    for (i = 0; i < 8; i++) {
  72          //        dat >>= 1;
  73          //        if (IO) dat |= 0x80;
  74          //        SCLK = 1;
  75          //        SCLK = 0;
  76          //    }
  77          //    return dat;
  78          //}
  79          
  80          //void DS1302_WriteTime(unsigned char address, unsigned char dataa) {
  81          //    CE = 1;  // Enable DS1302
  82          //    DS1302_WriteByte(address);  // Send address
  83          //    DS1302_WriteByte(dataa);  // Send data
  84          //    CE = 0;  // Disable DS1302
  85          //}
  86          
  87          //unsigned char DS1302_ReadTime(unsigned char address) {
  88          //    unsigned char dataa;
  89          //    CE = 1;  // Enable DS1302
  90          //    DS1302_WriteByte(address | 0x01);  // Send address with read command
  91          //    dataa = DS1302_ReadByte();  // Read data
  92          //    CE = 0;  // Disable DS1302
  93          //    return dataa;
  94          //}
  95          
  96          //void Display_Date_Time() {
  97          //    char buffer[17];
  98          //    sprintf(buffer, "Time: %02x:%02x:%02x", hour, min, sec);
  99          //    LCD_Command(0x80);  // Move to first line
 100          //    LCD_WriteString(buffer);
 101          
 102          //    sprintf(buffer, "Date: %02x/%02x/20%02x", day, month, year);
 103          //    LCD_Command(0xC0);  // Move to second line
 104          //    LCD_WriteString(buffer);
 105          //}
 106          
 107          //void Set_DS1302_Time(unsigned char h, unsigned char m, unsigned char s, unsigned char d, unsigned char m
             -o, unsigned char y) {
 108          //    DS1302_WriteTime(0x80, s);
 109          //    DS1302_WriteTime(0x82, m);
 110          //    DS1302_WriteTime(0x84, h);
 111          //    DS1302_WriteTime(0x86, d);
 112          //    DS1302_WriteTime(0x88, mo);
 113          //    DS1302_WriteTime(0x8C, y);
 114          //}
 115          
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:01:58 PAGE 3   

 116          //void UART_Init() {
 117          //    TMOD = 0x20;  // Timer 1, mode 2
 118          //    TH1 = 0xFD;   // 9600 baud rate
 119          //    SCON = 0x50;  // 8-bit, 1 stop bit, REN enabled
 120          //    TR1 = 1;      // Start Timer 1
 121          //}
 122          
 123          //void UART_SendChar(char c) {
 124          //    SBUF = c;
 125          //    while(TI == 0);
 126          //    TI = 0;
 127          //}
 128          
 129          //char UART_ReceiveChar() {
 130          //    while(RI == 0);
 131          //    RI = 0;
 132          //    return SBUF;
 133          //}
 134          
 135          //void UART_SendString(char *str) {
 136          //    while(*str) {
 137          //        UART_SendChar(*str++);
 138          //    }
 139          //}
 140          
 141          //void Set_Time_From_PC() {
 142          //    char time_data[7];
 143          //    unsigned char i;
 144          
 145          //    UART_SendString("Enter time in HHMMSSDDMMYY format: ");
 146          //    for(i = 0; i < 12; i++) {
 147          //        time_data[i] = UART_ReceiveChar();
 148          //        UART_SendChar(time_data[i]);  // Echo back the entered character
 149          //    }
 150          
 151          //    // Convert and set time
 152          //    Set_DS1302_Time((time_data[0]-'0')*10 + (time_data[1]-'0'), 
 153          //                    (time_data[2]-'0')*10 + (time_data[3]-'0'), 
 154          //                    (time_data[4]-'0')*10 + (time_data[5]-'0'), 
 155          //                    (time_data[6]-'0')*10 + (time_data[7]-'0'), 
 156          //                    (time_data[8]-'0')*10 + (time_data[9]-'0'), 
 157          //                    (time_data[10]-'0')*10 + (time_data[11]-'0'));
 158          //}
 159          
 160          //void main() {
 161          //    DS1302_Init();
 162          //    LCD_Init();
 163          //    UART_Init();
 164          
 165          //    Set_Time_From_PC();  // Set time from PC via serial port
 166          
 167          //    while(1) {
 168          //        sec = DS1302_ReadTime(0x81);  // Read seconds
 169          //        min = DS1302_ReadTime(0x83);  // Read minutes
 170          //        hour = DS1302_ReadTime(0x85);  // Read hours
 171          //        day = DS1302_ReadTime(0x87);  // Read day
 172          //        month = DS1302_ReadTime(0x89);  // Read month
 173          //        year = DS1302_ReadTime(0x8D);  // Read year
 174          
 175          //        Display_Date_Time();  // Display date and time on LCD
 176          
 177          //        delay(1000);  // Delay for 1 second
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:01:58 PAGE 4   

 178          //    }
 179          //}
 180          
 181          
 182          
 183          
 184          
 185          
 186          #include <reg52.h>
 187          #include <intrins.h>
 188          #include <stdio.h>
 189          
 190          sbit SCLK = P3^6;  // Serial Clock
 191          sbit IO = P3^4;    // Data I/O
 192          sbit CE = P3^5;    // Chip Enable
 193          
 194          sbit RS = P2^6;
 195          sbit RW = P2^5;
 196          sbit EN = P2^7;
 197          
 198          unsigned char sec, min, hour, day, month, year;
 199          
 200          // Delay Function
 201          void delay(unsigned int ms) {
 202   1          while(ms--) _nop_();
 203   1      }
 204          
 205          // LCD Functions
 206          void LCD_Command(unsigned char command) {
 207   1          RS = 0; 
 208   1          RW = 0; 
 209   1          P0 = command;
 210   1          EN = 1;
 211   1          delay(10);  // Increased delay
 212   1          EN = 0;
 213   1      }
 214          
 215          void LCD_Init() {
 216   1          LCD_Command(0x38);  // 8-bit mode, 2 lines
 217   1          LCD_Command(0x0C);  // Display on, cursor off
 218   1          LCD_Command(0x06);  // Increment cursor
 219   1          LCD_Command(0x01);  // Clear display
 220   1          delay(20);  // Wait for LCD to clear
 221   1      }
 222          
 223          void LCD_WriteChar(char c) {
 224   1          RS = 1;
 225   1          RW = 0;
 226   1          P0 = c;
 227   1          EN = 1;
 228   1          delay(10);  // Increased delay
 229   1          EN = 0;
 230   1      }
 231          
 232          void LCD_WriteString(char *str) {
 233   1          while(*str) {
 234   2              LCD_WriteChar(*str++);
 235   2          }
 236   1      }
 237          
 238          // DS1302 Functions
 239          void DS1302_Init() {
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:01:58 PAGE 5   

 240   1          CE = 0;  // Disable DS1302
 241   1          SCLK = 0;  // Initialize clock line
 242   1      }
 243          
 244          void DS1302_WriteByte(unsigned char dat) {
 245   1          unsigned char i;
 246   1          for (i = 0; i < 8; i++) {
 247   2              IO = dat & 0x01;
 248   2              SCLK = 1;
 249   2              dat >>= 1;
 250   2              SCLK = 0;
 251   2          }
 252   1      }
 253          
 254          unsigned char DS1302_ReadByte() {
 255   1          unsigned char dat = 0;
 256   1          unsigned char i;
 257   1          for (i = 0; i < 8; i++) {
 258   2              dat >>= 1;
 259   2              if (IO) dat |= 0x80;
 260   2              SCLK = 1;
 261   2              SCLK = 0;
 262   2          }
 263   1          return dat;
 264   1      }
 265          
 266          void DS1302_WriteTime(unsigned char address, unsigned char dataa) {
 267   1          CE = 1;  // Enable DS1302
 268   1          DS1302_WriteByte(address);  // Send address
 269   1          DS1302_WriteByte(dataa);  // Send data
 270   1          CE = 0;  // Disable DS1302
 271   1      }
 272          
 273          unsigned char DS1302_ReadTime(unsigned char address) {
 274   1          unsigned char dataa;
 275   1          CE = 1;  // Enable DS1302
 276   1          DS1302_WriteByte(address | 0x01);  // Send address with read command
 277   1          dataa = DS1302_ReadByte();  // Read data
 278   1          CE = 0;  // Disable DS1302
 279   1          return dataa;
 280   1      }
 281          
 282          void Display_Date_Time() {
 283   1          char buffer[17];
 284   1          sprintf(buffer, "Time: %02d:%02d:%02d", hour, min, sec);  // Changed %02x to %02d
 285   1          LCD_Command(0x80);  // Move to first line
 286   1          LCD_WriteString(buffer);
 287   1      
 288   1          sprintf(buffer, "Date: %02d/%02d/20%02d", day, month, year);  // Changed %02x to %02d
 289   1          LCD_Command(0xC0);  // Move to second line
 290   1          LCD_WriteString(buffer);
 291   1      }
 292          
 293          void Set_DS1302_Time(unsigned char h, unsigned char m, unsigned char s, unsigned char d, unsigned char mo,
             - unsigned char y) {
 294   1          DS1302_WriteTime(0x80, s);
 295   1          DS1302_WriteTime(0x82, m);
 296   1          DS1302_WriteTime(0x84, h);
 297   1          DS1302_WriteTime(0x86, d);
 298   1          DS1302_WriteTime(0x88, mo);
 299   1          DS1302_WriteTime(0x8C, y);
 300   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:01:58 PAGE 6   

 301          
 302          void UART_Init() {
 303   1          TMOD = 0x20;  // Timer 1, mode 2
 304   1          TH1 = 0xFD;   // 9600 baud rate
 305   1          SCON = 0x50;  // 8-bit, 1 stop bit, REN enabled
 306   1          TR1 = 1;      // Start Timer 1
 307   1      }
 308          
 309          void UART_SendChar(char c) {
 310   1          SBUF = c;
 311   1          while(TI == 0);
 312   1          TI = 0;
 313   1      }
 314          
 315          char UART_ReceiveChar() {
 316   1          while(RI == 0);
 317   1          RI = 0;
 318   1          return SBUF;
 319   1      }
 320          
 321          void UART_SendString(char *str) {
 322   1          while(*str) {
 323   2              UART_SendChar(*str++);
 324   2          }
 325   1      }
 326          
 327          void Set_Time_From_PC() {
 328   1          char time_data[12];
 329   1          unsigned char i;
 330   1      
 331   1          UART_SendString("Enter time in HHMMSSDDMMYY format: ");
 332   1          for(i = 0; i < 12; i++) {
 333   2              time_data[i] = UART_ReceiveChar();
 334   2              UART_SendChar(time_data[i]);  // Echo back the entered character
 335   2          }
 336   1      
 337   1          // Convert and set time
 338   1          Set_DS1302_Time((time_data[0]-'0')*10 + (time_data[1]-'0'), 
 339   1                          (time_data[2]-'0')*10 + (time_data[3]-'0'), 
 340   1                          (time_data[4]-'0')*10 + (time_data[5]-'0'), 
 341   1                          (time_data[6]-'0')*10 + (time_data[7]-'0'), 
 342   1                          (time_data[8]-'0')*10 + (time_data[9]-'0'), 
 343   1                          (time_data[10]-'0')*10 + (time_data[11]-'0'));
 344   1      }
 345          
 346          void main() {
 347   1          DS1302_Init();
 348   1          LCD_Init();
 349   1          UART_Init();
 350   1      
 351   1          Set_Time_From_PC();  // Set time from PC via serial port
 352   1      
 353   1          while(1) {
 354   2              sec = DS1302_ReadTime(0x81);  // Read seconds
 355   2              min = DS1302_ReadTime(0x83);  // Read minutes
 356   2              hour = DS1302_ReadTime(0x85);  // Read hours
 357   2              day = DS1302_ReadTime(0x87);  // Read day
 358   2              month = DS1302_ReadTime(0x89);  // Read month
 359   2              year = DS1302_ReadTime(0x8D);  // Read year
 360   2      
 361   2              Display_Date_Time();  // Display date and time on LCD
 362   2      
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:01:58 PAGE 7   

 363   2              delay(1000);  // Delay for 1 second
 364   2          }
 365   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    568    ----
   CONSTANT SIZE    =     80    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      41
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
