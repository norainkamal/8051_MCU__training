C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 15:23:29 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /* Only applicable for Time */
   2          
   3          #include <reg51.h>
   4          #include "LCD.h"
   5          #include <string.h>
   6          #include <stdio.h>
   7          
   8          sbit DS1302_IO = P3^4;
   9          sbit DS1302_CE = P3^5;
  10          sbit DS1302_CLK = P3^6;
  11          
  12          #define DS1302_READ_BURST 0xBF
  13          #define DS1302_WRITE_BURST 0xBE
  14          #define DS1302_SECOND 0x80
  15          #define DS1302_SECOND_READ 0x81
  16          #define DS1302_MINUTE 0x82
  17          #define DS1302_MINUTE_READ 0x83
  18          #define DS1302_HOUR 0x84 
  19          #define DS1302_HOUR_READ 0x85
  20          #define DS1302_DATE 0x86
  21          #define DS1302_MONTH 0x88
  22          #define DS1302_DAY 0x8A
  23          #define DS1302_YEAR 0x8C
  24          #define DS1302_CONTROL 0x8E
  25          #define DS1302_CHARGER 0x90
  26          #define DS1302_RAMBURST_READ 0xFF
  27          #define DS1302_RAMBURST_WRITE 0xFE
  28          #define CLK_DELAY 10
  29          
  30          void write_byte(unsigned int byte);
  31          unsigned char read_byte(unsigned char cmd);
  32          void DS1302_settime(unsigned char hour, unsigned char minute, unsigned char second);
  33          void DS1302_setdate(unsigned char day, unsigned char month, unsigned char year);
  34          void DS1302_gettime(void);
  35          void DS1302_getdate(void);
  36          void send_bit(unsigned int bitt);
  37          void DS1302_init();
  38          void DS1302_readbyte();
  39          void UART_receivedata();
  40          void UART_init();
  41          void extract_time_set_rtc(char *timestring);
  42          void lcd_display(unsigned char number);
  43          
  44          unsigned int xdata read_bytes[12]; // Moved to XDATA segment to reduce DATA usage
  45          unsigned char xdata receivemsg[100]; // Moved to XDATA segment
  46          unsigned char receivedata;
  47          unsigned int index = 0;
  48          bit messagereceived = 0;
  49          
  50          void extract_time_set_rtc(char *timestring)
  51          {
  52   1          unsigned int hour, minute, second;
  53   1          char timeformatted[7];
  54   1          sscanf(timestring, "%hhu:%hhu:%hhu", &hour, &minute, &second);
C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 15:23:29 PAGE 2   

  55   1          sprintf(timeformatted, "%02u,%02u,%02u", hour, minute, second);
  56   1          lcd_set_cursor(0, 0);
  57   1          lcd_string("TIME:");
  58   1          lcd_set_cursor(0, 6);
  59   1          lcd_string(timeformatted);
  60   1          sscanf(timestring, "0x%hhx:0x%hhx:0x%hhx", &hour, &minute, &second);
  61   1          DS1302_settime((unsigned char)hour, (unsigned char)minute, (unsigned char)second);
  62   1      }
  63          
  64          void UART_init()
  65          {
  66   1          TMOD = 0x20;
  67   1          TH1 = 0xFD; // 9600 baud rate
  68   1          SCON = 0x50;
  69   1          TR1 = 1;
  70   1      }
  71          
  72          void UART_receivedata()
  73          {
  74   1          while (RI == 0);
  75   1          RI = 0;
  76   1          receivedata = SBUF;
  77   1          messagereceived = 1;
  78   1      }
  79          
  80          void SCLK_Pulse()
  81          {
  82   1          DS1302_CLK = 1;
  83   1          DS1302_CLK = 0;
  84   1      }
  85          
  86          void send_bit(unsigned int bitt)
  87          {
  88   1          DS1302_IO = (bitt != 0) ? 1 : 0;
  89   1      }
  90          
  91          void write_byte(unsigned int byte)
  92          {
  93   1          unsigned int i, Bit;
  94   1          for (i = 0; i < 8; i++)
  95   1          { // RTC write byte
  96   2              Bit = byte & (1 << i);
  97   2              send_bit(Bit);
  98   2              SCLK_Pulse();
  99   2          }
 100   1      }
 101          
 102          unsigned char read_byte(unsigned char cmd)
 103          {
 104   1          unsigned int j, dat = 0;
 105   1          write_byte(cmd);
 106   1          for (j = 0; j < 8; j++)
 107   1          {
 108   2              dat >>= 1;
 109   2              if (DS1302_IO)
 110   2              {
 111   3                  dat |= 0x80;
 112   3              }
 113   2              SCLK_Pulse();
 114   2          }
 115   1          return dat;
 116   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 15:23:29 PAGE 3   

 117          
 118          void DS1302_writebyte(unsigned char cmd, unsigned char value)
 119          {
 120   1          DS1302_CE = 1;
 121   1          write_byte(cmd); // RTC write byte at address
 122   1          write_byte(value);
 123   1          DS1302_CE = 0;
 124   1      }
 125          
 126          void DS1302_readbyte()
 127          {
 128   1          unsigned int dat = 0, i, j;
 129   1          DS1302_CE = 1;
 130   1      
 131   1          write_byte(DS1302_READ_BURST);
 132   1          for (i = 0; i < 8; i++) // Store in array
 133   1          {
 134   2              dat = 0;
 135   2              for (j = 0; j < 8; j++) // Bit by bit read
 136   2              {
 137   3                  dat >>= 1;
 138   3                  if (DS1302_IO)
 139   3                  { // Reading ta enable
 140   4                      dat |= 0x80;
 141   4                  }
 142   3                  SCLK_Pulse();
 143   3              }
 144   2              read_bytes[i] = dat;
 145   2          }
 146   1          DS1302_CE = 0;
 147   1      }
 148          
 149          void DS1302_init()
 150          {
 151   1          unsigned char r;
 152   1          DS1302_CE = 0;
 153   1          DS1302_CLK = 0;
 154   1          DS1302_writebyte(DS1302_CONTROL, 0x00);
 155   1          DS1302_writebyte(DS1302_CHARGER, 0xAB);
 156   1      
 157   1          r = read_byte(DS1302_SECOND_READ);
 158   1          if ((r & DS1302_SECOND_READ) != 0)
 159   1              DS1302_writebyte(DS1302_SECOND, 0); // Zarah value zero ka
 160   1      }
 161          
 162          void DS1302_settime(unsigned char hour, unsigned char minute, unsigned char second)
 163          {
 164   1          DS1302_writebyte(DS1302_SECOND, second);
 165   1          DS1302_writebyte(DS1302_MINUTE, minute);
 166   1          DS1302_writebyte(DS1302_HOUR, hour);
 167   1      }
 168          
 169          void lcd_display(unsigned char number)
 170          {
 171   1          lcd_char(((number >> 4) & 0x0F) + 0x30); // Ten
 172   1          lcd_char((number & 0x0F) + 0x30); // Unit
 173   1      }
 174          
 175          void DS1302_gettime(void)
 176          {
 177   1          lcd_set_cursor(0, 0);
 178   1          lcd_set_cursor(0, 6);
C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 15:23:29 PAGE 4   

 179   1          lcd_display(read_bytes[2]);
 180   1          lcd_char(':');
 181   1          delay(10);
 182   1      
 183   1          lcd_set_cursor(0, 9);
 184   1          lcd_display(read_bytes[1]);
 185   1          lcd_char(':');
 186   1          delay(10);
 187   1      
 188   1          lcd_set_cursor(0, 12);
 189   1          lcd_display(read_bytes[0]);
 190   1          delay(10);
 191   1      }
 192          
 193          void DS1302_setdate(unsigned char day, unsigned char month, unsigned char year)
 194          {
 195   1          DS1302_writebyte(DS1302_DATE, day);
 196   1          DS1302_writebyte(DS1302_MONTH, month);
 197   1          DS1302_writebyte(DS1302_YEAR, year);
 198   1      }
 199          
 200          void DS1302_getdate(void)
 201          {
 202   1          lcd_set_cursor(1, 0);
 203   1          lcd_set_cursor(1, 6);
 204   1          lcd_display(read_bytes[3]);
 205   1          lcd_char(':');
 206   1          delay(10);
 207   1      
 208   1          lcd_set_cursor(1, 9);
 209   1          lcd_display(read_bytes[4]);
 210   1          lcd_char(':');
 211   1          delay(10);
 212   1      
 213   1          lcd_set_cursor(1, 12);
 214   1          lcd_display(read_bytes[6]);
 215   1          delay(10);
 216   1      }
 217          
 218          void main()
 219          {
 220   1          lcd_init();
 221   1          DS1302_init();
 222   1          UART_init();
 223   1      
 224   1          while (1)
 225   1          {
 226   2              UART_receivedata();
 227   2              if (messagereceived)
 228   2              {
 229   3                  if (receivedata == 'n')
 230   3                  {
 231   4                      receivemsg[index] = '\0';
 232   4                      if (receivemsg[0] == 't')
 233   4                      {
 234   5                          lcd_command(0x80);
 235   5                          delay(1000);
 236   5                          extract_time_set_rtc(&receivemsg[1]);
 237   5      
 238   5                          while (1)
 239   5                          {
 240   6                              DS1302_CE = 1;
C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 15:23:29 PAGE 5   

 241   6                              DS1302_readbyte();
 242   6                              DS1302_CE = 0;
 243   6                              DS1302_gettime();
 244   6                          }
 245   5      
 246   5                          index = 0;
 247   5                          memset(receivemsg, 0, sizeof(receivemsg));
 248   5                          messagereceived = 0;
 249   5                      }
 250   4                  }
 251   3                  else
 252   3                  {
 253   4                      receivemsg[index] = receivedata;
 254   4                      index++;
 255   4                  }
 256   3              }
 257   2              else
 258   2              {
 259   3                  lcd_string("nodata");
 260   3              }
 261   2          }
 262   1      }
 263          
 264          
 265          // -------------------------------------------------------------------------------------------------------
             ----------------------------------------------------------------------------
 266          
 267          
 268          
 269          
 270          //#include <reg51.h>
 271          //#include "LCD.h"
 272          //#include <string.h>
 273          //#include <stdio.h>
 274          
 275          //// Pin definitions for DS1302
 276          //sbit DS1302_IO = P3^4;
 277          //sbit DS1302_CE = P3^5;
 278          //sbit DS1302_CLK = P3^6;
 279          
 280          //// DS1302 Command Definitions
 281          //#define DS1302_READ_BURST 0xBF
 282          //#define DS1302_WRITE_BURST 0xBE
 283          //#define DS1302_SECOND 0x80
 284          //#define DS1302_SECOND_READ 0x81
 285          //#define DS1302_MINUTE 0x82
 286          //#define DS1302_MINUTE_READ 0x83
 287          //#define DS1302_HOUR 0x84 
 288          //#define DS1302_HOUR_READ 0x85
 289          //#define DS1302_DATE 0x86
 290          //#define DS1302_MONTH 0x88
 291          //#define DS1302_DAY 0x8A
 292          //#define DS1302_YEAR 0x8C
 293          //#define DS1302_CONTROL 0x8E
 294          //#define DS1302_CHARGER 0x90
 295          //#define DS1302_RAMBURST_READ 0xFF
 296          //#define DS1302_RAMBURST_WRITE 0xFE
 297          //#define CLK_DELAY 10
 298          
 299          //// Function Prototypes
 300          //void write_byte(unsigned int byte);
 301          //unsigned char read_byte(unsigned char cmd);
C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 15:23:29 PAGE 6   

 302          //void DS1302_settime(unsigned char hour, unsigned char minute, unsigned char second);
 303          //void DS1302_setdate(unsigned char day, unsigned char month, unsigned char year);
 304          //void DS1302_gettime(void);
 305          //void DS1302_getdate(void);
 306          //void send_bit(unsigned int bitt);
 307          //void DS1302_init();
 308          //void DS1302_readbyte();
 309          //void UART_receivedata();
 310          //void UART_init();
 311          //void extract_time_set_rtc(unsigned char xdata *timestring);
 312          
 313          //// Global Variables (moved to xdata space where necessary)
 314          //unsigned int xdata read_bytes[12];
 315          //unsigned char receivedata;
 316          //unsigned char xdata receivemsg[100];
 317          //unsigned int index = 0;
 318          //bit messagereceived = 0;
 319          
 320          //void extract_time_set_rtc(unsigned char xdata *timestring)
 321          //{
 322          //    unsigned int hour, minute, second;
 323          //    char timeformatted[7];
 324          //    sscanf(timestring, "%hhu:%hhu:%hhu", &hour, &minute, &second);
 325          //    sprintf(timeformatted, "%02u,%02u,%02u", hour, minute, second);
 326          //    lcd_set_cursor(0, 0);
 327          //    lcd_string("TIME:");
 328          //    lcd_set_cursor(0, 6);
 329          //    lcd_string(timeformatted);
 330          //    sscanf(timestring, "0x%hhx:0x%hhx:0x%hhx", &hour, &minute, &second);
 331          //    DS1302_settime((unsigned char)hour, (unsigned char)minute, (unsigned char)second);
 332          //}
 333          
 334          //void UART_init()
 335          //{
 336          //    TMOD = 0x20;
 337          //    TH1 = 0xFD; // 9600 baud rate
 338          //    SCON = 0x50;
 339          //    TR1 = 1;
 340          //}
 341          
 342          //void UART_receivedata()
 343          //{
 344          //    while(RI == 0);
 345          //    RI = 0;
 346          //    receivedata = SBUF;
 347          //    messagereceived = 1;
 348          //}
 349          
 350          //void SCLK_Pulse()
 351          //{
 352          //    DS1302_CLK = 1;
 353          //    DS1302_CLK = 0;
 354          //}
 355          
 356          //void send_bit(unsigned int bitt)
 357          //{
 358          //    if(bitt != 0)
 359          //    {
 360          //        DS1302_IO = 1; // write one bit
 361          //    }
 362          //    else
 363          //    {
C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 15:23:29 PAGE 7   

 364          //        DS1302_IO = 0;
 365          //    }
 366          //}
 367          
 368          //void write_byte(unsigned int byte)
 369          //{
 370          //    unsigned int i, Bit;
 371          //    for(i = 0; i < 8; i++)
 372          //    { // write byte to RTC
 373          //        Bit = byte & (1 << i);
 374          //        send_bit(Bit);
 375          //        SCLK_Pulse();
 376          //    }
 377          //}
 378          
 379          //unsigned char read_byte(unsigned char cmd)
 380          //{
 381          //    unsigned int j, dat = 0;
 382          //    write_byte(cmd);
 383          //    for(j = 0; j < 8; j++)
 384          //    {
 385          //        dat >>= 1;
 386          //        if(DS1302_IO)
 387          //        {
 388          //            dat |= 0x80;
 389          //        }
 390          //        else
 391          //        {
 392          //            dat &= 0x7F;
 393          //        }
 394          //        SCLK_Pulse();
 395          //    }
 396          //    return dat;
 397          //}
 398          
 399          //void DS1302_writebyte(unsigned char cmd, unsigned char value)
 400          //{
 401          //    DS1302_CE = 1;
 402          //    write_byte(cmd); // write byte to RTC at address
 403          //    write_byte(value);
 404          //    DS1302_CE = 0;
 405          //}
 406          
 407          //void DS1302_readbyte()
 408          //{
 409          //    unsigned int dat = 0, i, j;
 410          //    DS1302_CE = 1;
 411          //    write_byte(DS1302_READ_BURST);
 412          //    for(i = 0; i < 8; i++) // store in array
 413          //    {
 414          //        dat = 0;
 415          //        for(j = 0; j < 8; j++) // read bit by bit
 416          //        {
 417          //            dat >>= 1;
 418          //            if(DS1302_IO)
 419          //            { // read to enable
 420          //                dat |= 0x80;
 421          //            }
 422          //            else
 423          //            {
 424          //                dat &= 0x7F;
 425          //            }
C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 15:23:29 PAGE 8   

 426          //            SCLK_Pulse();
 427          //        }
 428          //        read_bytes[i] = dat;
 429          //    }
 430          //    DS1302_CE = 0;    
 431          //}
 432          
 433          //void DS1302_init()
 434          //{
 435          //    unsigned char r;
 436          //    DS1302_CE = 0; 
 437          //    DS1302_CLK = 0;
 438          //    DS1302_writebyte(DS1302_CONTROL, 0x00);
 439          //    DS1302_writebyte(DS1302_CHARGER, 0xAB);
 440          //    
 441          //    r = read_byte(DS1302_SECOND_READ);                
 442          //    if((r & DS1302_SECOND_READ) != 0)
 443          //        DS1302_writebyte(DS1302_SECOND, 0); // reset value to zero
 444          //}
 445          
 446          //void DS1302_settime(unsigned char hour, unsigned char minute, unsigned char second)
 447          //{
 448          //    DS1302_writebyte(DS1302_SECOND, second);
 449          //    DS1302_writebyte(DS1302_MINUTE, minute);
 450          //    DS1302_writebyte(DS1302_HOUR, hour);
 451          //}
 452          
 453          //void lcd_display(unsigned char number)
 454          //{
 455          //    lcd_char(((number >> 4) & 0x0F) + 0x30); // tens
 456          //    lcd_char((number & 0x0F) + 0x30); // units
 457          //}
 458          
 459          //void DS1302_gettime(void)
 460          //{
 461          //    lcd_set_cursor(0, 0);
 462          //    
 463          //    lcd_set_cursor(0, 6);
 464          //    lcd_display(read_bytes[2]);
 465          //    lcd_char(':');
 466          //    delay(10);
 467          //    
 468          //    lcd_set_cursor(0, 9);
 469          //    lcd_display(read_bytes[1]);
 470          //    lcd_char(':');
 471          //    delay(10);
 472          //    
 473          //    lcd_set_cursor(0, 12);
 474          //    lcd_display(read_bytes[0]);
 475          //    delay(10);
 476          //}
 477          
 478          //void DS1302_setdate(unsigned char day, unsigned char month, unsigned char year)
 479          //{
 480          //    DS1302_writebyte(DS1302_DATE, day);
 481          //    DS1302_writebyte(DS1302_MONTH, month);
 482          //    DS1302_writebyte(DS1302_YEAR, year);
 483          //}
 484          
 485          //void DS1302_getdate(void)
 486          //{
 487          //    lcd_set_cursor(1, 0);
C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 15:23:29 PAGE 9   

 488          //    
 489          //    lcd_set_cursor(1, 6);
 490          //    lcd_display(read_bytes[3]);
 491          //    lcd_char(':');
 492          //    delay(10);
 493          //    
 494          //    lcd_set_cursor(1, 9);
 495          //    lcd_display(read_bytes[4]);
 496          //    lcd_char(':');
 497          //    delay(10);
 498          //    
 499          //    lcd_set_cursor(1, 12);
 500          //    lcd_display(read_bytes[6]);
 501          //    delay(10);
 502          //}
 503          
 504          //void main()
 505          //{
 506          //    lcd_init();
 507          //    DS1302_init();
 508          //    UART_init();
 509          //        
 510          //    while(1)
 511          //    {         
 512          //        UART_receivedata();
 513          //        if(messagereceived)
 514          //        {
 515          //            if(receivedata == 'n')
 516          //            {
 517          //                receivemsg[index] = '\0';
 518          //                if(receivemsg[0] == 't')
 519          //                {
 520          //                    lcd_command(0x80);
 521          //                    delay(1000);
 522          //                    
 523          //                    extract_time_set_rtc(&receivemsg[1]);
 524          
 525          //                    while(1)
 526          //                    {
 527          //                        DS1302_CE = 1;
 528          //                        DS1302_readbyte();
 529          //                        DS1302_CE = 0;
 530          //                        DS1302_gettime();
 531          //                        DS1302_getdate(); // Display the date along with time
 532          //                    }
 533          //                
 534          //                    index = 0;
 535          //                    memset(receivemsg, 0, sizeof(receivemsg));
 536          //                    messagereceived = 0;
 537          //                }
 538          //            }
 539          //            else
 540          //            {
 541          //                receivemsg[index] = receivedata;
 542          //                index++;
 543          //            }
 544          //        }
 545          //        else
 546          //        {
 547          //            lcd_string("nodata");
 548          //        }
 549          //    }
C51 COMPILER V9.60.7.0   MAIN                                                              09/24/2024 15:23:29 PAGE 10  

 550          //}
 551          
 552          
 553          
 554          
*** WARNING C294 IN LINE 246 OF main.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    801    ----
   CONSTANT SIZE    =     64    ----
   XDATA SIZE       =    124    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
