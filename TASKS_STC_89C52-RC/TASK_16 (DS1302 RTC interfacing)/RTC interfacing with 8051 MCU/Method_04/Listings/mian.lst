C51 COMPILER V9.60.7.0   MIAN                                                              08/21/2024 16:57:04 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MIAN
OBJECT MODULE PLACED IN .\Objects\mian.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE mian.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\mian
                    -.lst) TABS(2) OBJECT(.\Objects\mian.obj)

line level    source

   1          #include <reg51.h> 
   2          #include "lcd.h"      
   3          #include "delay.h"
   4          //#include <DS1302.h>
   5          
   6          #define  ADR_WR_CREG    0x8E  //Control Register Write
   7          #define  ADR_RD_CREG    0x8F  //Control Register Read
   8          #define  ADR_WR_TCR     0x90  //Trickle Charge Register Write
   9          #define  ADR_RD_TCR     0x91  //Trickle Charge Register Read
  10          #define  ADR_WR_BURST   0xBE  //Burst Write
  11          #define  ADR_RD_BURST   0xBF  //Burst Read
  12          
  13          #define  ADR_WR_SEC    0x80  //Seconds Write
  14          #define  ADR_RD_SEC    0x81  //Seconds Read
  15          #define  ADR_WR_MIN    0x82  //Mins Write
  16          #define  ADR_RD_MIN    0x83  //Mins Read
  17          #define  ADR_WR_HR     0x84   //
  18          #define  ADR_RD_HR     0x85
  19          #define  ADR_WR_DATE   0x86
  20          #define  ADR_RD_DATE   0x87
  21          #define  ADR_WR_MON    0x88
  22          #define  ADR_RD_MON    0x89
  23          #define  ADR_WR_DAY    0x8A
  24          #define  ADR_RD_DAY    0x8B
  25          #define  ADR_WR_YR     0x8C
  26          #define  ADR_RD_YR     0x8D
  27          
  28          int clock_data[8];
  29          int temp_byte[8];
  30          int temp;
  31          int x;
  32          unsigned int i;
  33          unsigned int j;
  34          char array[32];
  35          char jj=0,ii=0,kk=0;
  36          
  37          unsigned char sec,min,hour,day,month,year;
  38          
  39          
  40          
  41          
  42          
  43          sbit CE=P3^5;
  44          sbit CLk=P3^6;
  45          sbit io=P3^4;
  46           
  47          
  48          
  49          
  50          void Ext_int_Init()       
  51          {
  52   1        EA  = 1;    /* Enable global interrupt */
  53   1        ES = 1;     /* Enable serial interrupt */     
  54   1      }
C51 COMPILER V9.60.7.0   MIAN                                                              08/21/2024 16:57:04 PAGE 2   

  55          
  56          void UART_Init()
  57          {
  58   1        TMOD = 0x20;    /* Timer 1, 8-bit auto reload mode */
  59   1        TH1 = 0xFD;   /* Load value for 9600 baud rate */
  60   1        TL1=0xFF;
  61   1        SCON = 0x50;    /* Mode 1, reception enable */
  62   1        TR1 = 1;    /* Start timer 1 */
  63   1      }
  64          void Serial_ISR() interrupt 4    
  65          { if(RI==1){
  66   2        array[jj]=SBUF; 
  67   2        RI = 0; /* Clear RI flag */
  68   2        jj++;
  69   2        } 
  70   1      
  71   1      } 
  72           void SCLK_Pulse (void)
  73          {
  74   1        CLk=1;
  75   1        CLk=0;
  76   1      }
  77          void Send_Bit (unsigned int value)
  78          {
  79   1          if (value != 0){
  80   2              io=1;
  81   2          }
  82   1          else {
  83   2              io=0;
  84   2          }
  85   1      }
  86           void Write_Byte(int content)
  87          {
  88   1      
  89   1          for (i=0;i<8;i++){
  90   2                   x = (content & (1 << i));  //Write to Address
  91   2                   Send_Bit(x);
  92   2                   SCLK_Pulse();
  93   2              }
  94   1      }
  95          
  96          void Read_Burst (void)
  97          {
  98   1          CE=1;
  99   1          Write_Byte(ADR_RD_BURST);
 100   1          for (i=0;i<8;i++){
 101   2              temp = 0;
 102   2          for (j=0;j<8;j++){
 103   3                  temp >>= 1;
 104   3                      if (io == 1){
 105   4      
 106   4                          temp |= 0x80;
 107   4                             }
 108   3                             else {
 109   4      
 110   4                          temp  &= 0x7F;
 111   4                             }
 112   3      
 113   3                      SCLK_Pulse();
 114   3                      }
 115   2          clock_data[i] = temp;
 116   2          }
C51 COMPILER V9.60.7.0   MIAN                                                              08/21/2024 16:57:04 PAGE 3   

 117   1          CE=0;
 118   1      }
 119          
 120          void Read_Byte(int addr)
 121          {
 122   1          temp = 0;
 123   1          Write_Byte(addr);
 124   1          for (j=0;j<8;j++){
 125   2              temp >>= 1;
 126   2              
 127   2              if (io == 1)
 128   2                  temp |= 0x80;
 129   2              else 
 130   2                  temp  &= 0x7F;
 131   2      
 132   2              SCLK_Pulse();
 133   2              }
 134   1      }
 135          void write_data(char cmd,char value)
 136          {
 137   1        CE=1;
 138   1        Write_Byte(cmd);  //cmd
 139   1        Write_Byte(value);  //data
 140   1        CE=0;
 141   1      }
 142           void set_time(char hrs, char mins, char secs , char days,char month,char year)
 143           {
 144   1        write_data(ADR_WR_SEC,secs);//Go to seconds register
 145   1        
 146   1        write_data(ADR_WR_MIN,mins);  //Go to minute register
 147   1        
 148   1        write_data(ADR_WR_HR,hrs);  //Go to hour register
 149   1      
 150   1        write_data(ADR_WR_DATE,days);  //Go to date register
 151   1        
 152   1        write_data(ADR_WR_MON,month);  //Go to month register
 153   1        
 154   1        write_data(ADR_WR_DAY,0x01);  //Go to day register
 155   1        
 156   1        write_data(ADR_WR_YR,year);  //Go to year register
 157   1       }   
 158           void time_cvt()
 159           {
 160   1           sec=((array[1]-0x030) | ((array[0]-0x30)<<4));
 161   1         min=((array[4]-0x030) | ((array[3]-0x30)<<4));
 162   1         hour=((array[7]-0x030) | ((array[17] & 0xD0)<<1) |((array[6]-0x30)<<4));
 163   1         day=((array[10]-0x030) | ((array[9]-0x30)<<4));
 164   1         month=((array[13]-0x030) | ((array[12]-0x30)<<4));
 165   1         year=((array[16]-0x030) | ((array[15]-0x30)<<4));
 166   1          set_time(hour,min,sec,day,month,year);
 167   1      
 168   1       }
 169          /* main program */
 170          void main() 
 171          {
 172   1        
 173   1        LCD_Init();
 174   1        
 175   1        write_data(ADR_WR_CREG,0x00);
 176   1        
 177   1        write_data(ADR_WR_TCR,0xAB);//Go to Trickle charge 
 178   1        //Enable Charger, 2 diodes, 8kOhm
C51 COMPILER V9.60.7.0   MIAN                                                              08/21/2024 16:57:04 PAGE 4   

 179   1        
 180   1        set_time(0xB1,0x59,0x00,0x21,0x012,0x22);
 181   1      
 182   1        Ext_int_Init();   /* Call Ext. interrupt initialize */
 183   1        UART_Init();
 184   1          
 185   1        lcd_DisplayString("TIME  ");
 186   1       
 187   1         /* Display "date" on Second line*/
 188   1        lcd_GoToLineTwo();
 189   1        lcd_DisplayString("DATE  ");
 190   1       
 191   1         /* Display the time and date continously */ 
 192   1         while(1)
 193   1          {
 194   2            if (jj>ii)
 195   2            {
 196   3              if(array[ii-1]== 0x5C && array[ii]== 'r' ){
 197   4                  EA  = 0;
 198   4                  ES = 0; 
 199   4                time_cvt();
 200   4                ii=0;jj=0;
 201   4              }
 202   3              ii++;
 203   3            }
 204   2            CE=1;
 205   2            Read_Burst();
 206   2            CE=0;
 207   2      
 208   2       
 209   2            lcd_GoToXY(0,6);     
 210   2            lcd_DisplayRtcTime(clock_data[2],clock_data[1],clock_data[0]);
 211   2            if((clock_data[2]&0x80)>0){
 212   3              if((clock_data[2]&0x20)>0)
 213   3                lcd_DisplayString("PM");
 214   3              else
 215   3                lcd_DisplayString("AM");
 216   3            }
 217   2            else
 218   2              lcd_DisplayString("  ");
 219   2            
 220   2            lcd_GoToXY(1,6);     
 221   2            lcd_DisplayRtcDate(clock_data[3],clock_data[4],clock_data[6]);
 222   2           }
 223   1      }
 224          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    681    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     81       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
