C51 COMPILER V9.60.7.0   DS1302                                                            09/23/2024 11:36:20 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE DS1302
OBJECT MODULE PLACED IN .\Objects\DS1302.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE DS1302.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\DS
                    -1302.lst) TABS(2) OBJECT(.\Objects\DS1302.obj)

line level    source

   1          #include <reg52.h>  // Include the 8051 microcontroller header file to use its special function registers 
             -and features
   2          #include "LCD1602.h"
   3          
   4          // Define pin connections for the DS1302 RTC (Real-Time Clock)
   5          sbit DS1302_SCLK = P3^6; // Define Serial Clock pin (SCLK) connected to Port 3, bit 6
   6          sbit DS1302_IO = P3^4;   // Define Input/Output data pin (IO) connected to Port 3, bit 4
   7          sbit DS1302_CE = P3^5;   // Define Chip Enable pin (CE) connected to Port 3, bit 5
   8          
   9          // Define addresses for various DS1302 registers
  10          #define DS1302_SECOND 0x80 // Register address for seconds
  11          #define DS1302_MINUTE 0x82 // Register address for minutes
  12          #define DS1302_HOUR   0x84 // Register address for hours
  13          #define DS1302_DATE   0x86 // Register address for date
  14          #define DS1302_MONTH  0x88 // Register address for month
  15          #define DS1302_DAY    0x8A // Register address for day of the week
  16          #define DS1302_YEAR   0x8C // Register address for year
  17          #define DS1302_WP     0x8E // Register address for write protection (WP)
  18          
  19          // Array to store time and date values
  20          unsigned int DS1302_Time[] = {23, 12, 31, 23, 59, 50, 6}; // {Year, Month, Date, Hour, Minute, Second, Day
             -}
  21          
  22          // Initialize DS1302 RTC
  23          void DS1302_Init() 
  24          {
  25   1          DS1302_CE = 0;   // Set Chip Enable (CE) pin low to disable communication with DS1302
  26   1          DS1302_SCLK = 0; // Set Serial Clock (SCLK) pin low (default state for clock signal)
  27   1          DS1302_IO = 0;   // Set IO pin low (default state for data transmission)
  28   1      }
  29          
  30          // Write a byte of data to the DS1302
  31          void DS1302_WriteByte(unsigned char Command, unsigned char Data) 
  32          {
  33   1          unsigned int i;
  34   1      
  35   1          DS1302_CE = 1; // Enable communication with the DS1302 by setting CE high
  36   1      
  37   1          // Send the Command byte to DS1302
  38   1          for (i = 0; i < 8; i++) 
  39   1          {
  40   2              DS1302_IO = Command & (0x01 << i); // Set IO pin to the bit of Command byte (0 or 1)
  41   2              DS1302_SCLK = 1; // Pulse the Serial Clock signal to DS1302 (rising edge)
  42   2              DS1302_SCLK = 0; // Return Serial Clock signal to low (falling edge)
  43   2          }
  44   1      
  45   1          // Send the Data byte to DS1302
  46   1          for (i = 0; i < 8; i++) 
  47   1          {
  48   2              DS1302_IO = Data & (0x01 << i); // Set IO pin to the bit of Data byte (0 or 1)
  49   2              DS1302_SCLK = 1; // Pulse the Serial Clock signal to DS1302 (rising edge)
  50   2              DS1302_SCLK = 0; // Return Serial Clock signal to low (falling edge)
  51   2          }
  52   1      
C51 COMPILER V9.60.7.0   DS1302                                                            09/23/2024 11:36:20 PAGE 2   

  53   1          DS1302_CE = 0; // Disable communication with the DS1302 by setting CE low
  54   1      }
  55          
  56          // Read a byte of data from the DS1302
  57          unsigned char DS1302_ReadByte(unsigned char Command) 
  58          {
  59   1          unsigned char i, Data = 0x00; // Initialize Data to 0
  60   1          Command |= 0x01; // Set the read bit (0x01) in Command to read data from DS1302
  61   1      
  62   1          DS1302_CE = 1; // Enable communication with the DS1302 by setting CE high
  63   1      
  64   1          // Send the Command byte to DS1302
  65   1          for (i = 0; i < 8; i++) 
  66   1          {
  67   2              DS1302_IO = Command & (0x01 << i); // Set IO pin to the bit of Command byte (0 or 1)
  68   2              DS1302_SCLK = 0; // Pulse the Serial Clock signal to DS1302 (falling edge)
  69   2              DS1302_SCLK = 1; // Return Serial Clock signal to high (rising edge)
  70   2          }
  71   1      
  72   1          DS1302_IO = 1; // Set IO pin to input mode to read data from DS1302
  73   1      
  74   1          // Read the Data byte from DS1302
  75   1          for (i = 0; i < 8; i++) 
  76   1          {
  77   2              DS1302_SCLK = 1; // Pulse the Serial Clock signal to DS1302 (rising edge)
  78   2              DS1302_SCLK = 0; // Return Serial Clock signal to low (falling edge)
  79   2      
  80   2              if (DS1302_IO) // Check if the data bit is high
  81   2              {
  82   3                  Data |= (0x01 << i); // Set the corresponding bit in Data
  83   3              }
  84   2          }
  85   1      
  86   1          DS1302_CE = 0; // Disable communication with the DS1302 by setting CE low
  87   1          DS1302_IO = 0; // Set IO pin back to low (prepare for next operation)
  88   1      
  89   1          return Data; // Return the read data
  90   1      }
  91          
  92          // Set the current time and date on the DS1302
  93          void DS1302_SetTime()
  94          {
  95   1          // Disable write protection to allow setting time
  96   1          DS1302_WriteByte(DS1302_WP, 0x00);
  97   1      
  98   1          // Convert time and date values from decimal to BCD (Binary-Coded Decimal) and write to DS1302
  99   1          DS1302_WriteByte(DS1302_YEAR, DS1302_Time[0] / 10 * 16 + DS1302_Time[0] % 10); // Set year
 100   1          DS1302_WriteByte(DS1302_MONTH, DS1302_Time[1] / 10 * 16 + DS1302_Time[1] % 10); // Set month
 101   1          DS1302_WriteByte(DS1302_DATE, DS1302_Time[2] / 10 * 16 + DS1302_Time[2] % 10); // Set date
 102   1          DS1302_WriteByte(DS1302_HOUR, DS1302_Time[3] / 10 * 16 + DS1302_Time[3] % 10); // Set hour
 103   1          DS1302_WriteByte(DS1302_MINUTE, DS1302_Time[4] / 10 * 16 + DS1302_Time[4] % 10); // Set minute
 104   1          DS1302_WriteByte(DS1302_SECOND, DS1302_Time[5] / 10 * 16 + DS1302_Time[5] % 10); // Set second
 105   1          DS1302_WriteByte(DS1302_DAY, DS1302_Time[6] / 10 * 16 + DS1302_Time[6] % 10); // Set day of the week
 106   1      
 107   1          // Re-enable write protection to prevent further changes
 108   1          DS1302_WriteByte(DS1302_WP, 0x80);
 109   1      }
 110          
 111          // Read the current time and date from the DS1302
 112          void DS1302_ReadTime()
 113          {
 114   1          unsigned int Temp;
C51 COMPILER V9.60.7.0   DS1302                                                            09/23/2024 11:36:20 PAGE 3   

 115   1      
 116   1          // Read and convert each time and date component from BCD (Binary-Coded Decimal) format to decimal
 117   1          Temp = DS1302_ReadByte(DS1302_YEAR);  // Read year
 118   1          DS1302_Time[0] = Temp / 16 * 10 + Temp % 16; // Convert from BCD to decimal
 119   1      
 120   1          Temp = DS1302_ReadByte(DS1302_MONTH); // Read month
 121   1          DS1302_Time[1] = Temp / 16 * 10 + Temp % 16; // Convert from BCD to decimal
 122   1      
 123   1          Temp = DS1302_ReadByte(DS1302_DATE); // Read date
 124   1          DS1302_Time[2] = Temp / 16 * 10 + Temp % 16; // Convert from BCD to decimal
 125   1      
 126   1          Temp = DS1302_ReadByte(DS1302_HOUR); // Read hour
 127   1          DS1302_Time[3] = Temp / 16 * 10 + Temp % 16; // Convert from BCD to decimal
 128   1      
 129   1          Temp = DS1302_ReadByte(DS1302_MINUTE); // Read minute
 130   1          DS1302_Time[4] = Temp / 16 * 10 + Temp % 16; // Convert from BCD to decimal
 131   1      
 132   1          Temp = DS1302_ReadByte(DS1302_SECOND); // Read second
 133   1          DS1302_Time[5] = Temp / 16 * 10 + Temp % 16; // Convert from BCD to decimal
 134   1      
 135   1          Temp = DS1302_ReadByte(DS1302_DAY); // Read day of the week
 136   1          DS1302_Time[6] = Temp / 16 * 10 + Temp % 16; // Convert from BCD to decimal
 137   1      }
 138          
 139          
 140          //  void DS1302_ReadTime() {
 141          //      unsigned char hour;
 142          //      unsigned char is_pm = 0; // Declare and initialize is_pm
 143          
 144          //      // Read the time from DS1302
 145          //      DS1302_Time[0] = DS1302_ReadByte(0x81); // Read second
 146          //      DS1302_Time[1] = DS1302_ReadByte(0x83); // Read minute
 147          //      hour = DS1302_ReadByte(0x85); // Read hour
 148          
 149          //      // Determine AM/PM and convert to 12-hour format if needed
 150          //      if (hour & 0x80) { // If the 12/24-hour mode bit is set
 151          //          is_pm = (hour & 0x20) ? 1 : 0; // PM if bit 5 is set
 152          //          hour &= 0x1F; // Clear the mode bits
 153          //          if (hour == 0) hour = 12; // Convert 0 hours to 12 (midnight)
 154          //          if (hour > 12) hour -= 12; // Convert to 12-hour format
 155          //      }
 156          
 157          //      DS1302_Time[2] = hour; // Store hour
 158          
 159          //      // Display time on LCD
 160          //      LCD_ShowNum(2, 7, DS1302_Time[2], 2);  // Display hour
 161          //      LCD_ShowChar(2, 9, ':');
 162          //      LCD_ShowNum(2, 10, DS1302_Time[1], 2); // Display minute
 163          //      LCD_ShowChar(2, 12, ':');
 164          //      LCD_ShowNum(2, 13, DS1302_Time[0], 2); // Display second
 165          
 166          //      // Display AM/PM on LCD
 167          //      if (is_pm) {
 168          //          LCD_ShowString(2, 15, "PM");
 169          //      } else {
 170          //          LCD_ShowString(2, 15, "AM");
 171          //      }
 172          //  }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    698    ----
C51 COMPILER V9.60.7.0   DS1302                                                            09/23/2024 11:36:20 PAGE 4   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
