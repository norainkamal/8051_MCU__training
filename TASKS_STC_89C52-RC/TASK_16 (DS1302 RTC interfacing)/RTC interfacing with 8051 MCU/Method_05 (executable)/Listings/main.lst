C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:25:50 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg51.h>             // Include the header file for 8051 microcontroller
   2          #include "LCD.h"               // Include the custom header file for LCD functions
   3          
   4          // Define pins connected to the DS1302 RTC
   5          sbit DS1302_IO =  P3^4;        // Data I/O pin of DS1302 connected to P3.4
   6          sbit DS1302_CE =  P3^5;        // Chip Enable pin of DS1302 connected to P3.5
   7          sbit DS1302_CLK = P3^6;        // Clock pin of DS1302 connected to P3.6
   8          
   9          // Define constants for DS1302 commands
  10          #define DS1302_READ_BURST      0xBF   // Command to read in burst mode
  11          #define DS1302_WRITE_BURST     0xBE   // Command to write in burst mode
  12          #define DS1302_SECOND          0x80   // Command to write seconds
  13          #define DS1302_SECOND_READ     0x81   // Command to read seconds
  14          #define DS1302_MINUTE          0x82   // Command to write minutes
  15          #define DS1302_MINUTE_READ     0x83   // Command to read minutes
  16          #define DS1302_HOUR            0x84   // Command to write hours
  17          #define DS1302_HOUR_READ       0x85   // Command to read hours
  18          #define DS1302_DATE            0x86   // Command to write date
  19          #define DS1302_MONTH           0x88   // Command to write month
  20          #define DS1302_DAY             0x8A   // Command to write day of the week
  21          #define DS1302_YEAR            0x8C   // Command to write year
  22          #define DS1302_CONTROL         0x8E   // Command to access control register
  23          #define DS1302_CHARGER         0x90   // Command to access trickle charger register
  24          #define DS1302_RAMBURST_READ   0xFF   // Command to read RAM in burst mode
  25          #define DS1302_RAMBURST_WRITE  0xFE   // Command to write RAM in burst mode
  26          #define CLK_DELAY              10     // Define a constant for clock delay
  27          
  28          // Function prototypes
  29          void write_byte(unsigned int byte);         // Prototype for function to write a byte to DS1302
  30          unsigned char read_byte(unsigned char cmd); // Prototype for function to read a byte from DS1302
  31          void DS1302_settime(unsigned char hour, unsigned char minute, unsigned char second); // Prototype to set t
             -ime on DS1302
  32          void DS1302_setdate(unsigned char day, unsigned char month, unsigned char year);     // Prototype to set d
             -ate on DS1302
  33          void DS1302_gettime(void); // Prototype to get time from DS1302
  34          void DS1302_getdate(void); // Prototype to get date from DS1302
  35          void send_bit(unsigned int bitt); // Prototype for function to send a single bit to DS1302
  36          void DS1302_init();     // Prototype for DS1302 initialization function
  37          void DS1302_readbyte(); // Prototype for function to read bytes in burst mode
  38          
  39          unsigned int read_bytes[12]; // Array to store bytes read from DS1302
  40          
  41          // Function to generate a clock pulse
  42          void SCLK_Pulse()
  43          {
  44   1          DS1302_CLK = 1;   // Set clock pin high
  45   1          DS1302_CLK = 0;   // Set clock pin low to complete the pulse
  46   1      }
  47          
  48          // Function to send a single bit to DS1302
  49          void send_bit(unsigned int bitt)
  50          {
  51   1          if (bitt != 0)
  52   1          {
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:25:50 PAGE 2   

  53   2              DS1302_IO = 1;  // If the bit is 1, set the IO pin high
  54   2          }
  55   1          else
  56   1          {
  57   2              DS1302_IO = 0;  // If the bit is 0, set the IO pin low
  58   2          }
  59   1      }
  60          
  61          // Function to write a byte to DS1302
  62          void write_byte(unsigned int byte)
  63          {
  64   1          unsigned int i, Bit;
  65   1          for (i = 0; i < 8; i++)  // Loop through each bit in the byte
  66   1          {
  67   2              Bit = byte & (1 << i); // Extract the current bit to send
  68   2              send_bit(Bit);         // Send the bit to DS1302
  69   2              SCLK_Pulse();          // Pulse the clock to latch the bit
  70   2          }
  71   1      }
  72          
  73          // Function to read a byte from DS1302
  74          unsigned char read_byte(unsigned char cmd)
  75          {
  76   1          unsigned int j, dat = 0;
  77   1          write_byte(cmd);  // Send the command to DS1302 to prepare it for reading
  78   1          for (j = 0; j < 8; j++)  // Loop through each bit in the byte
  79   1          {
  80   2              dat >>= 1;  // Shift the previously read bits to the right
  81   2              if (DS1302_IO)  // If the IO pin is high
  82   2              {
  83   3                  dat |= 0x80;  // Set the most significant bit of dat to 1
  84   3              }
  85   2              else
  86   2              {
  87   3                  dat &= 0x7F;  // Ensure the most significant bit of dat is 0
  88   3              }
  89   2              SCLK_Pulse();  // Pulse the clock to shift in the next bit
  90   2          }
  91   1          return dat;  // Return the byte read from DS1302
  92   1      }
  93          
  94          // Function to write a byte to a specific DS1302 register
  95          void DS1302_writebyte(unsigned char cmd, unsigned char value)
  96          {
  97   1          DS1302_CE = 1;        // Enable the DS1302 by setting CE high
  98   1          write_byte(cmd);      // Send the register address to DS1302
  99   1          write_byte(value);    // Send the value to be written to DS1302
 100   1          DS1302_CE = 0;        // Disable the DS1302 by setting CE low
 101   1      }
 102          
 103          // Function to read multiple bytes from DS1302 in burst mode
 104          void DS1302_readbyte()
 105          {
 106   1          unsigned int dat = 0, i, j;
 107   1          DS1302_CE = 1;  // Enable the DS1302 by setting CE high
 108   1          
 109   1          write_byte(DS1302_READ_BURST);  // Send the command to start burst read
 110   1          for (i = 0; i < 8; i++)  // Read 8 bytes in burst mode
 111   1          {
 112   2              dat = 0;
 113   2              for (j = 0; j < 8; j++)  // Loop through each bit in the byte
 114   2              {
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:25:50 PAGE 3   

 115   3                  dat >>= 1;  // Shift previously read bits to the right
 116   3                  if (DS1302_IO)  // If the IO pin is high
 117   3                  {
 118   4                      dat |= 0x80;  // Set the most significant bit of dat to 1
 119   4                  }
 120   3                  else
 121   3                  {
 122   4                      dat &= 0x7F;  // Ensure the most significant bit of dat is 0
 123   4                  }
 124   3                  SCLK_Pulse();  // Pulse the clock to shift in the next bit
 125   3              }
 126   2              read_bytes[i] = dat;  // Store the byte in the read_bytes array
 127   2          }    
 128   1          DS1302_CE = 0;  // Disable the DS1302 by setting CE low
 129   1      }
 130          
 131          // Function to initialize the DS1302 RTC
 132          void DS1302_init()
 133          {
 134   1          unsigned char r;
 135   1          DS1302_CE = 0;       // Disable the DS1302 initially
 136   1          DS1302_CLK = 0;      // Set the clock pin low initially
 137   1          DS1302_writebyte(DS1302_CONTROL, 0x00);  // Disable write protection
 138   1          DS1302_writebyte(DS1302_CHARGER, 0xAB);  // Configure the trickle charger
 139   1          
 140   1          r = read_byte(DS1302_SECOND_READ);  // Read the current seconds value
 141   1          if ((r & DS1302_SECOND_READ) != 0)  // Check if the oscillator is halted
 142   1          {
 143   2              DS1302_writebyte(DS1302_SECOND, 0);  // If halted, reset seconds to 0
 144   2          }
 145   1      }
 146          
 147          // Function to set the time on the DS1302 RTC
 148          void DS1302_settime(unsigned char hour, unsigned char minute, unsigned char second)
 149          {
 150   1          DS1302_writebyte(DS1302_SECOND, second);  // Write the seconds value
 151   1          DS1302_writebyte(DS1302_MINUTE, minute);  // Write the minutes value
 152   1          DS1302_writebyte(DS1302_HOUR, hour);      // Write the hours value
 153   1      }
 154          
 155          // Function to display a number on the LCD in BCD format
 156          void lcd_display(unsigned char number)
 157          {
 158   1          lcd_char(((number >> 4) & 0x0F) + 0x30); // Display the tens digit
 159   1          lcd_char((number & 0x0F) + 0x30);        // Display the units digit
 160   1      }
 161          
 162          // Function to get the time from the DS1302 RTC and display it on the LCD
 163          void DS1302_gettime(void)
 164          {
 165   1          lcd_set_cursor(0, 0);         // Set cursor to the beginning of the first line
 166   1          lcd_string("TIME:");          // Display the label "TIME:"
 167   1          
 168   1          lcd_set_cursor(0, 6);         // Set cursor to display the hour
 169   1          lcd_display(read_bytes[2]);   // Display the hour value
 170   1          lcd_char(':');                // Display the separator ":"
 171   1          delay(10);                    // Delay for stability
 172   1          
 173   1          lcd_set_cursor(0, 9);         // Set cursor to display the minute
 174   1          lcd_display(read_bytes[1]);   // Display the minute value
 175   1          lcd_char(':');                // Display the separator ":"
 176   1          delay(10);                    // Delay for stability
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:25:50 PAGE 4   

 177   1          
 178   1          lcd_set_cursor(0, 12);        // Set cursor to display the second
 179   1          lcd_display(read_bytes[0]);   // Display the second value
 180   1          delay(10);                    // Delay for stability
 181   1      }
 182          
 183          // Function to set the date on the DS1302 RTC
 184          void DS1302_setdate(unsigned char day, unsigned char month, unsigned char year)
 185          {
 186   1          DS1302_writebyte(DS1302_DATE, day);    // Write the day value
 187   1          DS1302_writebyte(DS1302_MONTH, month); // Write the month value
 188   1          DS1302_writebyte(DS1302_YEAR, year);   // Write the year value
 189   1      }
 190          
 191          // Function to get the date from the DS1302 RTC and display it on the LCD
 192          void DS1302_getdate(void)
 193          {
 194   1          lcd_set_cursor(1, 0);         // Set cursor to the beginning of the second line
 195   1          lcd_string("DATE:");          // Display the label "DATE:"
 196   1          
 197   1          lcd_set_cursor(1, 6);         // Set cursor to display the day
 198   1          lcd_display(read_bytes[3]);   // Display the day value
 199   1          lcd_char(':');                // Display the separator ":"
 200   1          delay(10);                    // Delay for stability
 201   1          
 202   1          lcd_set_cursor(1, 9);         // Set cursor to display the month
 203   1          lcd_display(read_bytes[4]);   // Display the month value
 204   1          lcd_char(':');                // Display the separator ":"
 205   1          delay(10);                    // Delay for stability
 206   1          
 207   1          lcd_set_cursor(1, 12);        // Set cursor to display the year
 208   1          lcd_display(read_bytes[6]);   // Display the year value
 209   1          delay(10);                    // Delay for stability
 210   1      }
 211          
 212          // Main function
 213          void main()
 214          {
 215   1          lcd_init();                    // Initialize the LCD
 216   1          DS1302_init();                 // Initialize the DS1302 RTC
 217   1          DS1302_settime(0x23, 0x59, 0x59);  // Set the initial time to 23:59:50
 218   1          DS1302_setdate(0x31, 0x12, 0x23);  // Set the initial date to 31/12/23
 219   1          
 220   1          while (1)  // Infinite loop
 221   1          {
 222   2              DS1302_CE = 1;             // Enable the DS1302 by setting CE high
 223   2              DS1302_readbyte();         // Read the current time and date values
 224   2              DS1302_CE = 0;             // Disable the DS1302 by setting CE low
 225   2              
 226   2              DS1302_gettime();          // Display the time on the LCD
 227   2              DS1302_getdate();          // Display the date on the LCD
 228   2          }
 229   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    535    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24       5
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:25:50 PAGE 5   

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
