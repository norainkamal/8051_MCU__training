C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:57:22 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          
   2          /*
   3          
   4          Part_03:
   5          If the temperature is higher than 37 degrees Celsius, sound the on board buzzer (ON for 
   6          500 ms, OFF for 500 ms and repeat). The buzzer present on the development kit is a 
   7          passive buzzer so you need to generate and supply an AC voltage to it. Use a timer to 
   8          toggle the buzzer pin at 4000 Hz. The resulting sound will be like this 
   9          // https://www.youtube.com/watch?v=dy5C_58kXEk Watch this video to understand the 
  10          difference between active and passive buzzers 
  11          // https://www.youtube.com/watch?v=L7H5PiJLeBc 
  12          
  13          */
  14          
  15          
  16          #include<reg51.h>
  17          #include "main.h"
  18          
  19          unsigned int indexx=0;
  20          unsigned char temp_lsb=0,temp_msb=0;
  21          unsigned char Unit,Ten,Hunderd,intpart,decpart;
  22          char temp_f;
  23          unsigned char temp_c;
  24          sbit DQ= P3^7;
  25          sbit buzzer_pin=P1^5;
  26          
  27          void ow_reset(void){
  28   1      DQ = 1;          //pull DQ line low
  29   1      delay_18B20(8);  // leave it low for 480us
  30   1      DQ = 0;          // allow line to return high
  31   1      delay_18B20(65); // wait for presence
  32   1      DQ=1;
  33   1      delay_18B20(20);    
  34   1      }
  35          
  36          // delay
  37          void delay_18B20(unsigned int ud){
  38   1          while(ud--); //
  39   1      }
  40          
  41          // READ_BYTE - reads a byte from the one-wire bus.
  42          unsigned char read_byte(void)
  43          {
  44   1          unsigned char i=0;
  45   1          unsigned char dat = 0;
  46   1          for (i=8;i>0;i--){
  47   2                DQ = 0;
  48   2                dat>>=1;
  49   2                DQ = 1;
  50   2                if(DQ)
  51   2                dat |= 0x80;
  52   2                delay_18B20(4);
  53   2          }
  54   1          return(dat);
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:57:22 PAGE 2   

  55   1      }
  56          
  57          // WRITE_BYTE - writes a byte to the one-wire bus.
  58          void write_byte(char dat)
  59          {
  60   1          unsigned char i=0;
  61   1          for (i=8; i>0; i--){
  62   2              DQ = 0;
  63   2              DQ = dat&0x01;
  64   2              delay_18B20(5);
  65   2              DQ = 1;
  66   2              dat>>=1;
  67   2          }
  68   1      }
  69          
  70          void Read_Temperature(void)
  71          {
  72   1      ow_reset();
  73   1      write_byte(0xCC); //Skip ROM
  74   1      write_byte(0x44); // Start Conversion
  75   1      delay_18B20(10); 
  76   1      ow_reset();
  77   1      write_byte(0xCC); // Skip ROM
  78   1      write_byte(0xBE); // Read Scratch Pad
  79   1      delay_18B20(10);
  80   1        
  81   1      temp_msb = read_byte(); // Sign byte + lsbit
  82   1      temp_lsb = read_byte(); // Temp data plus lsb
  83   1      
  84   1      temp_c = ((temp_lsb*256+temp_msb)>>4);
  85   1      temp_f = (((int)temp_c)* 9)/5 + 32;
  86   1      
  87   1      }
  88          void hex2lcd(unsigned char z){
  89   1      
  90   1        Hunderd=(z/100) + 0x30; //hundred
  91   1        Ten=(z%100/10) + 0x30; //ten
  92   1        Unit=(z%10) + 0x30; //unit
  93   1        intpart = (int)z;
  94   1        decpart = (z - intpart) + 0x30;
  95   1        lcd_write(Hunderd);
  96   1        lcd_write(Ten);
  97   1        lcd_write(Unit);
  98   1        lcd_string(".");
  99   1        lcd_write(decpart);
 100   1      }
 101          void timer0_intrupt (void) interrupt 1   // called after 50 ms 
 102          {
 103   1        indexx+=1;
 104   1        if(indexx==400)
 105   1        {
 106   2        LCD_Command(0x80);
 107   2        lcd_string("Temprature is:");
 108   2        LCD_Command(0xc0);
 109   2        Read_Temperature();
 110   2        hex2lcd(temp_c);
 111   2      
 112   2        lcd_string(" C");
 113   2        indexx=0;
 114   2        }
 115   1        display_num_7seg(temp_c);
 116   1        values_on_ssd();
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 11:57:22 PAGE 3   

 117   1        
 118   1        
 119   1        
 120   1        // This condition checks if the temperature (temp_c) is greater than or equal to 28°C. 
 121   1        // If true, it activates the buzzer with a short ON-OFF cycle to indicate the temperature has exceeded th
             -e threshold. 
 122   1        // After the cycle, the buzzer is turned off, and Timer0 is set for future timing operations.
 123   1        
 124   1        if(temp_c>=37)
 125   1        {
 126   2          buzzer_pin=0;
 127   2          delay1(2);
 128   2          buzzer_pin=1;
 129   2          delay1(2);
 130   2        }
 131   1        buzzer_pin=1;
 132   1        TH0=0xFC;
 133   1        TL0=0x18;
 134   1      }
 135          
 136          void main()
 137          {
 138   1        lcd_init();
 139   1        IE=0x82; // enable timer 0 interrupt and serial interrupt
 140   1      
 141   1        TMOD = 0x21; // using timer0 in mode1 and timer1 in mode2
 142   1        SCON=0x50; // Asyncronous mode, 8-bit and 1-stop bit
 143   1        TH1=0xFD;
 144   1        TH0=0xFC;
 145   1        TL0=0x18;
 146   1        TR0=1;
 147   1        TR1=1;
 148   1      while(1)
 149   1        {
 150   2          display_num_serial(temp_c);
 151   2          serial_data();
 152   2      //  
 153   2        }
 154   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    447    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
